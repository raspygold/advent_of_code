require_relative "../puzzle"
class Day10P1 < Puzzle
  def test_cases
    { # {input => expected}
      [
        ".#..#",
        ".....",
        "#####",
        "....#",
        "...##",
       ] => { [3,4] => 8 },
      [
        "......#.#.",
        "#..#.#....",
        "..#######.",
        ".#.#.###..",
        ".#..#.....",
        "..#....#.#",
        "#..#....#.",
        ".##.#..###",
        "##...#..#.",
        ".#....####",
      ] => { [5,8] => 33 },
      [
        "#.#...#.#.",
        ".###....#.",
        ".#....#...",
        "##.#.#.#.#",
        "....#.#.#.",
        ".##..###.#",
        "..#...##..",
        "..##....##",
        "......#...",
        ".####.###.",
      ] => { [1,2] => 35 },
      [
        ".#..#..###",
        "####.###.#",
        "....###.#.",
        "..###.##.#",
        "##.##.#.#.",
        "....###..#",
        "..#.#..#.#",
        "#..#.#.###",
        ".##...##.#",
        ".....#.#..",
      ] => { [6,3] => 41 },
      [
        ".#..##.###...#######",
        "##.############..##.",
        ".#.######.########.#",
        ".###.#######.####.#.",
        "#####.##.#.##.###.##",
        "..#####..#.#########",
        "####################",
        "#.####....###.#.#.##",
        "##.#################",
        "#####.##.###..####..",
        "..######..##.#######",
        "####.##.####...##..#",
        ".#####..#.######.###",
        "##...#.##########...",
        "#.##########.#######",
        ".####.#.###.###.#.##",
        "....##.##.###..#####",
        ".#.#.###########.###",
        "#.#.#.#####.####.###",
        "###.##.####.##.#..##",
      ] => { [11,13] => 210 }
    }
  end

  def solve(input, testing: false)
    $max_x = input.first.size - 1
    $max_y = input.size - 1

    # Find all asteroid XY pairs
    asteroid_xys = []
    input.each.with_index do |row, y|
      row.chars.each.with_index do |val, x|
        asteroid_xys << [x, y] if val == '#'
      end
    end

    asteroid_xys_counts = {}
    asteroid_xys.each.with_object(asteroid_xys_counts) do |(x,y), hsh|
      visible_asteroids =
      hsh[xy] = visible_asteroids.count
    end

    puts asteroid_xys_counts.inspect
  end
end
